
DC_motor_input_delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085c  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e3  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000303  00000000  00000000  00001143  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001448  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c3  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dc  00000000  00000000  0000186f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000194b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_user>:
#include <avr/io.h>
#include <util/delay.h>

// Custom delay function using 1 ms steps
void delay_user(int t) {
    for (int i = 0; i < t; i++) {
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	08 c0       	rjmp	.+16     	; 0x96 <delay_user+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	ef e9       	ldi	r30, 0x9F	; 159
  88:	ff e0       	ldi	r31, 0x0F	; 15
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <delay_user+0xa>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <delay_user+0x10>
  90:	00 00       	nop
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	28 17       	cp	r18, r24
  98:	39 07       	cpc	r19, r25
  9a:	ac f3       	brlt	.-22     	; 0x86 <delay_user+0x6>
        _delay_ms(1);
    }
}
  9c:	08 95       	ret

0000009e <cw>:


void cw(int t) {
    PORTB |= (1 << PORTB5);
  9e:	25 b1       	in	r18, 0x05	; 5
  a0:	20 62       	ori	r18, 0x20	; 32
  a2:	25 b9       	out	0x05, r18	; 5
    PORTB &= ~(1 << PORTB4);
  a4:	25 b1       	in	r18, 0x05	; 5
  a6:	2f 7e       	andi	r18, 0xEF	; 239
  a8:	25 b9       	out	0x05, r18	; 5
    delay_user(t);
  aa:	0e 94 40 00 	call	0x80	; 0x80 <delay_user>
  ae:	08 95       	ret

000000b0 <stp>:
}


void stp(int t) {
    PORTB &= ~(1 << PORTB4);
  b0:	25 b1       	in	r18, 0x05	; 5
  b2:	2f 7e       	andi	r18, 0xEF	; 239
  b4:	25 b9       	out	0x05, r18	; 5
    PORTB &= ~(1 << PORTB5);
  b6:	25 b1       	in	r18, 0x05	; 5
  b8:	2f 7d       	andi	r18, 0xDF	; 223
  ba:	25 b9       	out	0x05, r18	; 5
    delay_user(t);
  bc:	0e 94 40 00 	call	0x80	; 0x80 <delay_user>
  c0:	08 95       	ret

000000c2 <ccw>:
}


void ccw(int t) {
    PORTB |= (1 << PORTB4);
  c2:	25 b1       	in	r18, 0x05	; 5
  c4:	20 61       	ori	r18, 0x10	; 16
  c6:	25 b9       	out	0x05, r18	; 5
    PORTB &= ~(1 << PORTB5);
  c8:	25 b1       	in	r18, 0x05	; 5
  ca:	2f 7d       	andi	r18, 0xDF	; 223
  cc:	25 b9       	out	0x05, r18	; 5
    delay_user(t);
  ce:	0e 94 40 00 	call	0x80	; 0x80 <delay_user>
  d2:	08 95       	ret

000000d4 <main>:
}

int main(void) {
    DDRB |= (1 << DDB4) | (1 << DDB5);  
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	80 63       	ori	r24, 0x30	; 48
  d8:	84 b9       	out	0x04, r24	; 4

    while (1) {
        cw(3000);     
  da:	88 eb       	ldi	r24, 0xB8	; 184
  dc:	9b e0       	ldi	r25, 0x0B	; 11
  de:	0e 94 4f 00 	call	0x9e	; 0x9e <cw>
        stp(1000);    
  e2:	88 ee       	ldi	r24, 0xE8	; 232
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	0e 94 58 00 	call	0xb0	; 0xb0 <stp>
        ccw(7000);    
  ea:	88 e5       	ldi	r24, 0x58	; 88
  ec:	9b e1       	ldi	r25, 0x1B	; 27
  ee:	0e 94 61 00 	call	0xc2	; 0xc2 <ccw>
        stp(1000);    
  f2:	88 ee       	ldi	r24, 0xE8	; 232
  f4:	93 e0       	ldi	r25, 0x03	; 3
  f6:	0e 94 58 00 	call	0xb0	; 0xb0 <stp>
  fa:	ef cf       	rjmp	.-34     	; 0xda <main+0x6>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
