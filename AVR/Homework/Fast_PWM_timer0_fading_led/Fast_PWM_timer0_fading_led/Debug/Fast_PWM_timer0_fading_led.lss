
Fast_PWM_timer0_fading_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000760  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067f  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c4  00000000  00000000  00000fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dc  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	
    DDRD|=(1<<DDD6);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10
	TCCR0B|=(1<<CS00);
  86:	85 b5       	in	r24, 0x25	; 37
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	85 bd       	out	0x25, r24	; 37
	TCCR0B|=(1<<CS01);
  8c:	85 b5       	in	r24, 0x25	; 37
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	85 bd       	out	0x25, r24	; 37
	TCCR0A|=(1<<WGM01);
  92:	84 b5       	in	r24, 0x24	; 36
  94:	82 60       	ori	r24, 0x02	; 2
  96:	84 bd       	out	0x24, r24	; 36
	TCCR0A|=(1<<WGM00);
  98:	84 b5       	in	r24, 0x24	; 36
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	84 bd       	out	0x24, r24	; 36
	TCCR0A|=(1<<COM0A1);
  9e:	84 b5       	in	r24, 0x24	; 36
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	84 bd       	out	0x24, r24	; 36
	for(int i=0;i<256;i++)
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0b c0       	rjmp	.+22     	; 0xc0 <main+0x40>
	{
		OCR0A=i;
  aa:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	30 e7       	ldi	r19, 0x70	; 112
  b0:	42 e0       	ldi	r20, 0x02	; 2
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	40 40       	sbci	r20, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
	TCCR0B|=(1<<CS00);
	TCCR0B|=(1<<CS01);
	TCCR0A|=(1<<WGM01);
	TCCR0A|=(1<<WGM00);
	TCCR0A|=(1<<COM0A1);
	for(int i=0;i<256;i++)
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	8f 3f       	cpi	r24, 0xFF	; 255
  c2:	91 05       	cpc	r25, r1
  c4:	91 f3       	breq	.-28     	; 0xaa <main+0x2a>
  c6:	8c f3       	brlt	.-30     	; 0xaa <main+0x2a>
	{
		OCR0A=i;
		_delay_ms(50);
	}
		
	if (OCR0A==255)
  c8:	87 b5       	in	r24, 0x27	; 39
  ca:	8f 3f       	cpi	r24, 0xFF	; 255
  cc:	69 f0       	breq	.+26     	; 0xe8 <main+0x68>
  ce:	10 c0       	rjmp	.+32     	; 0xf0 <main+0x70>
	{
		for(int j=255;j>=0;j--)
			{
				OCR0A=j;
  d0:	87 bd       	out	0x27, r24	; 39
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	39 ef       	ldi	r19, 0xF9	; 249
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	40 40       	sbci	r20, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
		_delay_ms(50);
	}
		
	if (OCR0A==255)
	{
		for(int j=255;j>=0;j--)
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x6c>
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	99 23       	and	r25, r25
  ee:	84 f7       	brge	.-32     	; 0xd0 <main+0x50>
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x70>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
