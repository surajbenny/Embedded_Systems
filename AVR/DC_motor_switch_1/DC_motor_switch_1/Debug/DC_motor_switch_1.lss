
DC_motor_switch_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  0000101f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  000016a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{
	DDRB|=(1<<DDB5);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 62       	ori	r24, 0x20	; 32
  84:	84 b9       	out	0x04, r24	; 4
	DDRB|=(1<<DDB4);
  86:	84 b1       	in	r24, 0x04	; 4
  88:	80 61       	ori	r24, 0x10	; 16
  8a:	84 b9       	out	0x04, r24	; 4
	DDRD&=~(1<<DDD2);
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	8b 7f       	andi	r24, 0xFB	; 251
  90:	8a b9       	out	0x0a, r24	; 10
	while (1)
	{
		if(PIND &(1<<PIND2))
  92:	4a 9b       	sbis	0x09, 2	; 9
  94:	3d c0       	rjmp	.+122    	; 0x110 <main+0x90>
		{
			
		
		PORTB|=(1<<PORTB5);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	85 b9       	out	0x05, r24	; 5
		PORTB&=~(1<<PORTB4);
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	8f 7e       	andi	r24, 0xEF	; 239
  a0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	83 e2       	ldi	r24, 0x23	; 35
  a6:	94 ef       	ldi	r25, 0xF4	; 244
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x28>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x32>
  b2:	00 00       	nop
		_delay_ms(5000);
		PORTB&=~(1<<PORTB4);
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	85 b9       	out	0x05, r24	; 5
		PORTB&=~(1<<PORTB5);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	85 b9       	out	0x05, r24	; 5
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	83 ed       	ldi	r24, 0xD3	; 211
  c4:	90 e3       	ldi	r25, 0x30	; 48
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x46>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x50>
  d0:	00 00       	nop
		_delay_ms(1000);
		PORTB|=(1<<PORTB4);
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	85 b9       	out	0x05, r24	; 5
		PORTB&=~(1<<PORTB5);
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	85 b9       	out	0x05, r24	; 5
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	83 e2       	ldi	r24, 0x23	; 35
  e2:	94 ef       	ldi	r25, 0xF4	; 244
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x64>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x6e>
  ee:	00 00       	nop
		_delay_ms(5000);
		PORTB&=~(1<<PORTB4);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	85 b9       	out	0x05, r24	; 5
		PORTB&=~(1<<PORTB5);
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	83 ed       	ldi	r24, 0xD3	; 211
 100:	90 e3       	ldi	r25, 0x30	; 48
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x82>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x8c>
 10c:	00 00       	nop
 10e:	c1 cf       	rjmp	.-126    	; 0x92 <main+0x12>
		_delay_ms(1000);
		}
		else
		{
					PORTB&=~(1<<PORTB4);
 110:	85 b1       	in	r24, 0x05	; 5
 112:	8f 7e       	andi	r24, 0xEF	; 239
 114:	85 b9       	out	0x05, r24	; 5
					PORTB&=~(1<<PORTB5);
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8f 7d       	andi	r24, 0xDF	; 223
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	ba cf       	rjmp	.-140    	; 0x92 <main+0x12>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
