
delay_timer_0_normal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c4  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063b  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000251  00000000  00000000  00000eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_1s>:

void delay_1s(void)
{
	unsigned int i;
	unsigned int count=	62500;
	for (i=0;i<count;i++)
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	0c c0       	rjmp	.+24     	; 0x9e <delay_1s+0x1e>
	{
	
	TCNT0=0;
  86:	16 bc       	out	0x26, r1	; 38
	TCCR0A=0;
  88:	14 bc       	out	0x24, r1	; 36
	TCCR0B|=(1<<CS00);
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	85 bd       	out	0x25, r24	; 37
	TIFR0|=(1<<TOV0); // making timer overflow flag 0, in atmega to set 0
  90:	85 b3       	in	r24, 0x15	; 21
  92:	81 60       	ori	r24, 0x01	; 1
  94:	85 bb       	out	0x15, r24	; 21
	while(!(TIFR0 & (1<< TOV0))); // waiting timer overflow flag to set so that we get a  delay 16 us
  96:	a8 9b       	sbis	0x15, 0	; 21
  98:	fe cf       	rjmp	.-4      	; 0x96 <delay_1s+0x16>

void delay_1s(void)
{
	unsigned int i;
	unsigned int count=	62500;
	for (i=0;i<count;i++)
  9a:	2f 5f       	subi	r18, 0xFF	; 255
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
  9e:	24 32       	cpi	r18, 0x24	; 36
  a0:	84 ef       	ldi	r24, 0xF4	; 244
  a2:	38 07       	cpc	r19, r24
  a4:	80 f3       	brcs	.-32     	; 0x86 <delay_1s+0x6>
	TCCR0A=0;
	TCCR0B|=(1<<CS00);
	TIFR0|=(1<<TOV0); // making timer overflow flag 0, in atmega to set 0
	while(!(TIFR0 & (1<< TOV0))); // waiting timer overflow flag to set so that we get a  delay 16 us
	}
}
  a6:	08 95       	ret

000000a8 <main>:

int main(void)
{
	DDRB|=(1<<DDB5);
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	84 b9       	out	0x04, r24	; 4
    /* Replace with your application code */
    while (1)
    {
		PORTB|=(1<<PORTB5);
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	85 b9       	out	0x05, r24	; 5
		delay_1s();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <delay_1s>
		PORTB&=~(1<<PORTB5);
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	8f 7d       	andi	r24, 0xDF	; 223
  bc:	85 b9       	out	0x05, r24	; 5
		delay_1s();
  be:	0e 94 40 00 	call	0x80	; 0x80 <delay_1s>
  c2:	f5 cf       	rjmp	.-22     	; 0xae <main+0x6>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
