
Modular_delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000760  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a6  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f2  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000381  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:



int main(void)
{
    DDRB|=(1<<DDB5);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 62       	ori	r24, 0x20	; 32
  84:	84 b9       	out	0x04, r24	; 4
	
    while (1) 
    {
		PORTB^=(1<<PORTB5);
  86:	95 b1       	in	r25, 0x05	; 5
  88:	80 e2       	ldi	r24, 0x20	; 32
  8a:	89 27       	eor	r24, r25
  8c:	85 b9       	out	0x05, r24	; 5
		suraj(5000);
  8e:	88 e8       	ldi	r24, 0x88	; 136
  90:	93 e1       	ldi	r25, 0x13	; 19
  92:	0e 94 5c 00 	call	0xb8	; 0xb8 <suraj>
  96:	f7 cf       	rjmp	.-18     	; 0x86 <main+0x6>

00000098 <timer0_init>:


void timer0_init(void) // define timer0_init()
{
	
	TCCR0A|=(1<<WGM01); //CTC Mode
  98:	84 b5       	in	r24, 0x24	; 36
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	84 bd       	out	0x24, r24	; 36
	OCR0A=249; //For count 250 setpoint , to get 1 ms delay
  9e:	89 ef       	ldi	r24, 0xF9	; 249
  a0:	87 bd       	out	0x27, r24	; 39
	TCNT0=0;// making counter 0
  a2:	16 bc       	out	0x26, r1	; 38
	TCCR0B|=(1<<CS00);
  a4:	85 b5       	in	r24, 0x25	; 37
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	85 bd       	out	0x25, r24	; 37
	TCCR0B|=(1<<CS01); // prescalar 64
  aa:	85 b5       	in	r24, 0x25	; 37
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	85 bd       	out	0x25, r24	; 37
	TIFR0|=(1<<OCF0A); // setting flag to 0
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	08 95       	ret

000000b8 <suraj>:
}

void suraj(uint16_t ms)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	ec 01       	movw	r28, r24
	timer0_init();
  be:	0e 94 4c 00 	call	0x98	; 0x98 <timer0_init>
	
	while (ms--) // creates delay for ms
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <suraj+0x18>
	{
		while (!(TIFR0&(1<<OCF0A))) // 1 ms loop
  c4:	a9 9b       	sbis	0x15, 1	; 21
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <suraj+0xc>
		{
			
		}
		TIFR0|=(1<<OCF0A);
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	85 bb       	out	0x15, r24	; 21

void suraj(uint16_t ms)
{
	timer0_init();
	
	while (ms--) // creates delay for ms
  ce:	e9 01       	movw	r28, r18
  d0:	9e 01       	movw	r18, r28
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	cd 2b       	or	r28, r29
  d8:	a9 f7       	brne	.-22     	; 0xc4 <suraj+0xc>
		{
			
		}
		TIFR0|=(1<<OCF0A);
	}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
